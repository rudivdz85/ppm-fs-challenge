version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: ppm-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ppm_challenge
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/init-db:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - ppm-network

  # Express Server
  server:
    build:
      context: .
      dockerfile: ./apps/server/Dockerfile
    container_name: ppm-server
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - PORT=3000
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/ppm_challenge
      - JWT_SECRET=your-super-secret-jwt-key-change-this-in-production
      - JWT_EXPIRES_IN=7d
    ports:
      - "3000:3000"
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./apps/server/.env:/app/.env:ro
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3000/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - ppm-network

  # React Client
  client:
    build:
      context: .
      dockerfile: ./apps/client/Dockerfile
    container_name: ppm-client
    restart: unless-stopped
    ports:
      - "80:80"
    depends_on:
      - server
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - ppm-network

  # Redis (for caching and sessions)
  redis:
    image: redis:7-alpine
    container_name: ppm-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - ppm-network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  ppm-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16